name: Deploy
on:
  push:
    branches: [ feature/*, develop, master ]
env:
  language: 'javascript'
  CURRENT_VERSION: $(node -p "require('./package.json').version")
jobs:
  install-dependencies:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 14.x
      - name: Restore or save cache for dev Dependencies
        uses: actions/cache@v2
        env:
          cache-name: npm-node-modules
        with:
          path: node_modules
          key: npm-${{ env.cache-name }}-${{ hashFiles('**/package.json') }}-dev
      - name: Install Dependencies
        run: |
          if [ -d "node_modules" ]; then
            echo 'Dependencies already exists!'
          else
            npm i
          fi
  build:
    runs-on: ubuntu-20.04
    needs: install-dependencies
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 14.x
      - name: Restore or save cache for dev Dependencies
        uses: actions/cache@v2
        env:
          cache-name: npm-node-modules
        with:
          path: node_modules
          key: npm-${{ env.cache-name }}-${{ hashFiles('**/package.json') }}-dev
      - name: Install Dependencies
        run: |
          npm run build
      - name: Persist Data
        uses: actions/upload-artifact@v2
        with:
          name: build
          path: build
  test:
    runs-on: ubuntu-20.04
    needs: install-dependencies
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 14.x
      - name: Restore or save cache for dev Dependencies
        uses: actions/cache@v2
        env:
          cache-name: npm-node-modules
        with:
          path: node_modules
          key: npm-${{ env.cache-name }}-${{ hashFiles('**/package.json') }}-dev
      - name: Running Linter
        run: npm run lint
      - name: Running Test
        run: |
          npm run test:coverage
      - name: Persist Data
        uses: actions/upload-artifact@v2
        with:
          name: coverage
          path: coverage

  Deploy:
    if: github.ref == 'refs/heads/develop'
    name: "Deployment"
    runs-on: "ubuntu-20.04"
    needs:
      - test
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ steps.vars.outputs.tag }}
        run: |
          docker build -t ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }} .
          docker push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
          echo "::set-output name=image::${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}"

      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition service \
          --query taskDefinition > task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v2
        with:
          task-definition: task-definition.json
          container-name: application
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ secrets.ECS_SERVICE }}
          cluster: ${{ secrets.ECS_CLUSTER }}
          wait-for-service-stability: true
