name: Deploy
on:
  push:
    branches: [ feature/*, develop, master ]
env:
  SERVICE_NAME: dermo-app-backend-auth-web
  ECR_REGISTRY: 966388213582.dkr.ecr.us-east-1.amazonaws.com
  CONTAINER_NAME: container-dermo-app-backend-auth-web
  ECS_CLUSTER: DermoAppWebCluster
  ECS_SERVICE: s-dermo-app-web-service-3000
  AWS_REGION: us-east-1
  BRANCH_NAME: ${{ github.head_ref || github.ref_name }}

jobs:
  install-dependencies:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16
      - name: Restore or save cache for dev Dependencies
        uses: actions/cache@v3
        env:
          cache-name: npm-node-modules
        with:
          path: node_modules
          key: npm-${{ env.cache-name }}-${{ hashFiles('**/package.json') }}-dev
      - name: Install Dependencies
        run: |
          if [ -d "node_modules" ]; then
            echo 'Dependencies already exists!'
          else
            npm i
          fi
  build:
    runs-on: ubuntu-20.04
    needs: install-dependencies
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 14.x
      - name: Restore or save cache for dev Dependencies
        uses: actions/cache@v3
        env:
          cache-name: npm-node-modules
        with:
          path: node_modules
          key: npm-${{ env.cache-name }}-${{ hashFiles('**/package.json') }}-dev
      - name: Install Dependencies
        run: |
          npm run build
      - name: Persist Data
        uses: actions/upload-artifact@v3
        with:
          path: |
            dist: ./dist

  test:
    runs-on: ubuntu-20.04
    needs: install-dependencies
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 14.x
      - name: Restore or save cache for dev Dependencies
        uses: actions/cache@v3
        env:
          cache-name: npm-node-modules
        with:
          path: node_modules
          key: npm-${{ env.cache-name }}-${{ hashFiles('**/package.json') }}-dev
      - name: Running Linter
        run: npm run lint
      - name: Running Test
        run: |
          npm run test:nowatch

  sonarcloud:
    needs: test
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 14.x
      - name: BRANCH_NAME
        run: echo ${{ env.BRANCH_NAME }}
      - name: Restore cache for dev Dependencies
        uses: actions/cache@v3
        env:
          cache-name: npm-node-modules
        with:
          path: node_modules
          key: npm-${{ env.cache-name }}-${{ hashFiles('**/package.json') }}-dev
      - name: Running Test
        run: |
          npm run test:coverage
      - name: Persist Data
        uses: actions/upload-artifact@v3
        with:
          name: coverage
          path: ./coverage
      - uses: actions/checkout@v2
        with:
          # Disabling shallow clone is recommended for improving relevancy of reporting
          fetch-depth: 0
      - name: SonarCloud Scan
        uses: sonarsource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  Deploy:
    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/master'
    name: "Deployment"
    runs-on: "ubuntu-20.04"
    permissions:
      id-token: write
      contents: read
    needs:
      - build
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 14.x

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, push image to Amazon ECR
        id: build-image
        env:
          IMAGE_TAG: latest
        run: |
          docker build -t ${{ env.SERVICE_NAME }}:${{ env.IMAGE_TAG }} .
          docker tag ${{ env.SERVICE_NAME }}:${{ env.IMAGE_TAG }} ${{ env.ECR_REGISTRY }}/${{ env.SERVICE_NAME }}:${{ env.IMAGE_TAG }}
          docker push ${{ env.ECR_REGISTRY }}/${{ env.SERVICE_NAME }}:${{ env.IMAGE_TAG }}

      - name: Download task definition
        run: |
            aws ecs describe-task-definition --task-definition dermo-app-backend-auth-web-task --query taskDefinition > task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: pipeline/task-definition.json
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ env.ECR_REGISTRY }}/${{ env.SERVICE_NAME }}:${{ env.IMAGE_TAG }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: pipeline/task-definition.json
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
